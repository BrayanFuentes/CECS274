/**
   A class for executing binary searches in an array.
*/
public class BinarySearcher
{  
   /**
      Finds a value in a range of a sorted array, using the binary
      search algorithm.
      @param a the array in which to search
      @param low the low index of the range
      @param high the high index of the range
      @param value the value to find
 * @return 
   */
   public static int[] search(int[] a, int low, int high, int value, int[] cords)
   {  
      if (low <= high)
      {
         int mid = (low + high) / 2;

         if (a[mid] == value) 
         {
            if(a[mid -1] == value && a[mid+1]== value)
            {
            	for(int i = mid; i >= 0; i++)
            	{
            		if(a[i]== value)
            		{
            			cords[0] = i;
            		}
            	}
            	for(int i = mid; i < a.length; i++)
            	{
            		if(a[i]== value)
            		{
            			cords[1] = i;
            		}
            	}
            }
            else if (a[mid-1] == value && !(a[mid+1]== value))
            {
            	for(int i = mid; i >= 0;i++)
            	{
            		if(a[i]==value)
            		{
            			cords[0] =i;
            		}
            	}
            	cords[1]=mid;
            	
            }
            else if(!(a[mid-1] == value) && a[mid+1]== value)
            {
            	cords[0]= mid;
            	for(int i = mid; i < a.length;i++)
            	{
            		if(a[i]==value)
            		{
            			cords[1]=i;
            		}
            	}
            	
            }
            else
            {
            	cords[0] = mid;
            	cords[1] = mid;
            }
           
         }
         else if (a[mid] < value )
         {
            return search(a, mid + 1, high, value,cords);
         }
         else
         {
            return search(a, low, mid - 1, value,cords);
         }         
      }
      else 
      {
    	cords[0]=-1;
      	for(int i = 0; i < a.length;i++)
      	{
      		if(i != a.length -1)
      		{
      			if(a[i] <= value && a[i+1]>=value)
      				cords[1] =i+1;
      		}
      	}
      	
      }
      return cords;
   }
}
